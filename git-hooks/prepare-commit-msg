#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples.  The first comments out the
# "Conflicts:" part of a merge commit.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

#case "$2,$3" in
#  merge,)
#    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
#
## ,|template,)
##   /usr/bin/perl -i.bak -pe '
##      print "\n" . `git diff --cached --name-status -r`
##	 if /^#/ && $first++ == 0' "$1" ;;
#
#  *) ;;
#esac
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# $2 コミットログメッセージの元の種類を示す
#   message  ... -m や -F オプションが指定されている
#   template ... -t オプションまたは commit.template が指定されている
#   merge    ... マージコミットまたは .git/MERGE_MSG が存在する
#   squash   ... .git/SQUASH_MSG が存在する
#   commit   ... -c や -C や --amend が指定されている（$3 が元となるコミットを示す）

# リベースで連続して squash したとき両方 message となる
# メッセージにコメント行が追加されるのは最後の１回のみなので
# フックでコメント行を追加するとめっさ重複する

# リベースでコミットを入れ替えたときは message になる
# このときコメント行を追加するとそれもメッセージに含まれてしまうので
# message ではコメント行を埋めないようにする
#
# コミットメッセージを編集するエディタが起動する直前
# にフックが差し込めれば良いのだけれども

case "$2" in
  message)
    ;;
  *)
    {
        cat "$1" | sed -n -e '/^#/q' -e 'p'
        git log --graph --date=short --format="%h [%ad]%d %s" -n 10 | sed 's/^/#-> /'
        echo '#'
        cat "$1" | sed -n -e '/^#/,$p'
    } > "$1.tmp"
    mv -f "$1.tmp" "$1"
    ;;
esac
