#!/bin/bash

# Usage: $0 [options] cmd args... ( :: cmd args... )...
#
# Options:
#   -h            display this help and exit
#   -q            automatically close pane at exit command
#   -s            synchronize-panes off
#   -l <layout>   select layout
#                     t     tiled
#                     eh    even-horizontal
#                     ev    even-vertical
#                     mh    main-horizontal
#                     mv    main-vertical

# 関数定義からの export -f で出来るかと思ったけれども、
# 既に tmux が起動している状態からの実行だと環境変数が引き継げない
if [ "$1" == "__tmux_cmds_spawn" ]; then
  shift
  while :; do
    clear
    trap true INT
    printf "> \e[1;33m%s\e[m\n" "$*"
    "$@"
    code=$?
    if [ "$code" -eq 0 ]; then
      color=32
    else
      color=31
    fi
    printf "\e[1;%sm%s\e[m" "$color" "Exit code [$code]. Press [Enter] to exit, [r] to restart..."

    while read -r -t 0.1 -N 100; do true; done

    trap exit INT
    while read -s -N 1 x; do
      case "$x" in
        r|R)
          break
          ;;
        $'\n')
          exit
          ;;
        *)
          continue
          ;;
      esac
    done
  done
  exit
fi

set -eu

self=$0
TMUX_SESSION_NAME=
if [ -z "$TMUX" ]; then
  TMUX_SESSION_NAME=tmux-cmds-$(date +%s)
fi
TMUX_LAYOUT=even-vertical

usage_exit() {
  sed -rn '/^# Usage/,${/^#/!q;s/^# ?//;p}' "$0" |
  sed -r "s/\\\$0/$(basename "$0")/" |
  head -1
  exit 1
}

help_exit() {
  sed -rn '/^# Usage/,${/^#/!q;s/^# ?//;p}' "$0" |
  sed -r "s/\\\$0/$(basename "$0")/"
  exit 1
}

autoclose=
synchronize=1
layout=$TMUX_LAYOUT

while getopts :hqsl: opt; do
  case "$opt" in
    h) help_exit       ;;
    q) autoclose=1     ;;
    s) synchronize=    ;;
    l) layout=$OPTARG  ;;
    \?)
      printf "%s: illegal option -- '%s'\n\n"  "$(basename "$0")" "$OPTARG" 1>&2
      usage_exit
      ;;
  esac
done

shift $((OPTIND - 1))

case "$layout" in
  t)  layout=tiled           ;;
  eh) layout=even-horizontal ;;
  ev) layout=even-vertical   ;;
  mh) layout=main-horizontal ;;
  mv) layout=main-vertical   ;;
esac

tmux_cmds=()
add_tmux_cmd() {
  tmux_cmds+=("$@" \;)
}

tmux_session_started=
add_tmux_spawn() {
  if [ "${#args[@]}" -ne 0 ]; then
    if [ ! "$autoclose" ]; then
      set -- bash -c 'printf "\e]0;%s\a" " tmux-cmds "; self=$1; shift; exec "$self" __tmux_cmds_spawn "$@"' -- "$self" "$@"
    else
      set -- bash -c 'printf "\e]0;%s\a" " tmux-cmds "; exec "$@"' -- "$@"
    fi
    if [ -n "$TMUX_SESSION_NAME" ]; then
      if [ -z "$tmux_session_started" ]; then
        add_tmux_cmd new-session -s "${TMUX_SESSION_NAME}" "$@"
        tmux_session_started=1
      else
        add_tmux_cmd split-window -t "${TMUX_SESSION_NAME}" "$@"
      fi
    else
      if [ -z "$tmux_session_started" ]; then
        add_tmux_cmd new-window -a "$@"
        tmux_session_started=1
      else
        add_tmux_cmd split-window "$@"
      fi
    fi
  fi
}

args=()
for x in "$@"; do
  if [ "$x" == "::" ]; then
    add_tmux_spawn "${args[@]}"
    add_tmux_cmd select-layout -t "${TMUX_SESSION_NAME}" "${layout}"
    args=()
  else
    args+=("$x")
  fi
done
add_tmux_spawn "${args[@]}"

if [ "${#tmux_cmds[@]}" -eq 0 ]; then
  usage_exit
fi

if [ -n "$TMUX_SESSION_NAME" ]; then
  add_tmux_cmd select-layout -t "${TMUX_SESSION_NAME}" "${layout}"
  if [ "$synchronize" ]; then
    add_tmux_cmd set-window-option -t "${TMUX_SESSION_NAME}" synchronize-panes on
  fi
  add_tmux_cmd select-pane -t "${TMUX_SESSION_NAME}:^.0"
else
  add_tmux_cmd select-layout "${layout}"
  if [ "$synchronize" ]; then
    add_tmux_cmd set-window-option synchronize-panes on
  fi
  add_tmux_cmd select-pane -t ".0"
fi
exec tmux "${tmux_cmds[@]}"
